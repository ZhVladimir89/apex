#ifndef libcpp_mutex_h
#define libcpp_mutex_h

#include <cassert>
#include <utility>

namespace std {

struct adopt_lock_t { explicit adopt_lock_t() = default; };
struct defer_lock_t { explicit defer_lock_t() = default; };

inline constexpr std::adopt_lock_t adopt_lock{};
inline constexpr std::defer_lock_t defer_lock{};

/*
 * lock_guard
 */
template<typename T>
class lock_guard {
public:
	typedef T mutex_type;

	explicit lock_guard(T &m)
	: m_{m}
	{
		m_.lock();
	}

	lock_guard(T &m, adopt_lock_t)
	: m_{m}
	{ }

	~lock_guard()
	{
		m_.unlock();
	}

	lock_guard(const lock_guard &) = delete;
	lock_guard &operator=(const lock_guard &) = delete;

private:
	T &m_;
};

/*
 * lock_guard_irq
 */
template<typename T>
class lock_guard_irq {
public:
	typedef T mutex_type;

	explicit lock_guard_irq(T &m)
	: m_{m}
	{
		s = m_.lock_irq_disable();
	}

	~lock_guard_irq()
	{
		m_.unlock_irq_restore(s);
	}

	lock_guard_irq(const lock_guard_irq &) = delete;
	lock_guard_irq &operator=(const lock_guard_irq &) = delete;

private:
	T &m_;
	int s;
};

/*
 * unique_lock
 */
template<typename T>
class unique_lock {
public:
	typedef T mutex_type;

	unique_lock()
	: m_{0}
	, locked_{false}
	{ }

	explicit unique_lock(T &m)
	: m_{&m}
	, locked_{false}
	{
		lock();
	}

	unique_lock(T &m, defer_lock_t)
	: m_{&m}
	, locked_{false}
	{ }

	unique_lock(T &m, adopt_lock_t)
	: m_{&m}
	, locked_{true}
	{ }

	~unique_lock()
	{
		if (locked_)
			unlock();
	}

	unique_lock(const unique_lock &) = delete;
	unique_lock &operator=(const unique_lock &) = delete;

	unique_lock(unique_lock &&o)
	: m_{o.m_}
	, locked_{o.locked_}
	{
		o.m_ = nullptr;
		o.locked_ = false;
	}

	unique_lock &operator=(unique_lock &&o)
	{
		if (locked_)
			unlock();

		unique_lock tmp{std::move(o)};
		tmp.swap(*this);

		return *this;
	}

	void lock()
	{
		assert(m_);
		assert(!locked_);
		m_->lock();
		locked_ = true;
	}

	void unlock()
	{
		assert(m_);
		assert(locked_);
		m_->unlock();
		locked_ = false;
	}

	void swap(unique_lock &o)
	{
		std::swap(m_, o.m_);
		std::swap(locked_, o.locked_);
	}

	T* release()
	{
		const auto r{m_};
		m_ = 0;
		locked_ = false;
		return r;
	}

	bool owns_lock() const
	{
		return locked_;
	}

	explicit operator bool() const
	{
		return locked_;
	}

	T* mutex() const
	{
		return m_;
	}

private:
	T *m_;
	bool locked_;
};

template<typename T> void
swap(unique_lock<T> &l, unique_lock<T> &r)
{
	l.swap(r);
}

/*
 * unique_lock_irq
 */
template<typename T>
class unique_lock_irq {
public:
	typedef T mutex_type;

	unique_lock_irq()
	: m_{0}
	, locked_{false}
	{ }

	explicit unique_lock_irq(T &m)
	: m_{&m}
	, locked_{false}
	{
		lock();
	}

	unique_lock_irq(T &m, defer_lock_t)
	: m_{&m}
	, locked_{false}
	{ }

	~unique_lock_irq()
	{
		if (locked_)
			unlock();
	}

	unique_lock_irq(const unique_lock_irq &) = delete;
	unique_lock_irq &operator=(const unique_lock_irq &) = delete;

	unique_lock_irq(unique_lock_irq &&o)
	: m_{o.m_}
	, s_{o.s_}
	, locked_{o.locked_}
	{
		o.m_ = nullptr;
		o.locked_ = false;
	}

	unique_lock_irq &operator=(unique_lock_irq &&o)
	{
		if (locked_)
			unlock();

		unique_lock_irq tmp{std::move(o)};
		tmp.swap(*this);

		return *this;
	}

	void lock()
	{
		assert(m_);
		assert(!locked_);
		s_ = m_->lock_irq_disable();
		locked_ = true;
	}

	void unlock()
	{
		assert(m_);
		assert(locked_);
		m_->unlock_irq_restore(s_);
		locked_ = false;
	}

	void swap(unique_lock_irq &o)
	{
		std::swap(m_, o.m_);
		std::swap(s_, o.s_);
		std::swap(locked_, o.locked_);
	}

	T* release()
	{
		const auto r{m_};
		m_ = 0;
		locked_ = false;
		return r;
	}

	bool owns_lock() const
	{
		return locked_;
	}

	explicit operator bool() const
	{
		return locked_;
	}

	T* mutex() const
	{
		return m_;
	}

private:
	T *m_;
	bool locked_;
	int s_;
};

template<typename T> void
swap(unique_lock_irq<T> &l, unique_lock_irq<T> &r)
{
	l.swap(r);
}

}

/*
 * interruptible_lock
 */
template<typename T>
class interruptible_lock {
public:
	typedef T mutex_type;

	explicit interruptible_lock(T &m)
	: m_{m}
	, locked_{false}
	{ }

	auto lock()
	{
		/* m_.interruptible_lock() returns 0 on success */
		const auto r = m_.interruptible_lock();
		locked_ = !r;
		return r;
	}

	void unlock()
	{
		if (locked_) {
			m_.unlock();
			locked_ = false;
		}
	}

	bool locked() const
	{
		return locked_;
	}

	~interruptible_lock()
	{
		unlock();
	}

	interruptible_lock(const interruptible_lock &) = delete;
	interruptible_lock &operator=(const interruptible_lock &) = delete;

private:
	T &m_;
	bool locked_;
};

/*
 * interruptible_read_lock
 */
template<typename T>
class interruptible_read_lock {
public:
	typedef T mutex_type;

	explicit interruptible_read_lock(T &m)
	: m_{m}
	, locked_{false}
	{ }

	auto lock()
	{
		/* m_.interruptible_read_lock() returns 0 on success */
		const auto r = m_.interruptible_read_lock();
		locked_ = !r;
		return r;
	}

	void unlock()
	{
		if (locked_) {
			m_.read_unlock();
			locked_ = false;
		}
	}

	bool locked() const
	{
		return locked_;
	}

	~interruptible_read_lock()
	{
		unlock();
	}

	interruptible_read_lock(const interruptible_read_lock &) = delete;
	interruptible_read_lock &operator=(const interruptible_read_lock &) = delete;

private:
	T &m_;
	bool locked_;
};

/*
 * interruptible_write_lock
 */
template<typename T>
class interruptible_write_lock {
public:
	typedef T mutex_type;

	explicit interruptible_write_lock(T &m)
	: m_{m}
	, locked_{false}
	{ }

	auto lock()
	{
		/* m_.interruptible_write_lock() returns 0 on success */
		const auto r = m_.interruptible_write_lock();
		locked_ = !r;
		return r;
	}

	void unlock()
	{
		if (locked_) {
			m_.write_unlock();
			locked_ = false;
		}
	}

	bool locked() const
	{
		return locked_;
	}

	~interruptible_write_lock()
	{
		unlock();
	}

	interruptible_write_lock(const interruptible_write_lock &) = delete;
	interruptible_write_lock &operator=(const interruptible_write_lock &) = delete;

private:
	T &m_;
	bool locked_;
};

#endif
