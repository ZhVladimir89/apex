define connect
	target remote localhost:2331
end

define reset
	mon reset
	# Reset FlexRAM configuration as the boot ROM expects to use OCRAM as
	# stack and is too stupid to make sure it will actually work.
	set *0x400ac040 = 0x00200003
end
document reset
	Usage: reset

	Reset processor.
end

define flash
	# Write image to flexspi hyperflash device.
	reset
	python
import os
gdb.execute('mon loadbin ' + os.environ['BUILDDIR'] + '/' + os.environ['BOARD'] + '_flexspi 0x60000000')
	end
	reset
end
document flash
	Usage: flash

	Write image to FlexSPI connected flash device.
end

define sdflash
	reset

	echo > Loading flash loader...\n
	python
import os
gdb.execute('mon loadbin ' + os.environ['TOOLSDIR'] + '/ivt_flashloader.bin 0x20000000')
	end
	set $pc = *0x20000404
	mon go
	echo > Waiting for flash loader to start...\n
	shell until $TOOLSDIR/blhost -u -- get-property 1 > /dev/null; do; done
	echo > Configuring SD card in 4-bit mode, no reset, SDR104 timing...\n
	shell $TOOLSDIR/blhost -u -- fill-memory 0x2000 4 0xd0000310
	shell $TOOLSDIR/blhost -u -- configure-memory 0x120 0x2000
	echo > Erasing first 4MiB of SD card...\n
	shell $TOOLSDIR/blhost -u -- flash-erase-region 0x0 0x400000 0x120
	echo > Writing to SD card...\n
	shell $TOOLSDIR/blhost -u -- write-memory 0x0 $BUILDDIR/$BOARD_sdcard 0x120
	reset
end
document sdflash
	Usage: sdflash

	Write image to uSDHC connected SD card.
end

define debug_boot
	reset
	symbol-file apex/boot/boot.elf
	b _start
	c
end
document debug_boot
	Usage: debug_boot

	Reset CPU and stop at entry to boot loader.
end

define debug_kernel
	reset
	symbol-file apex/sys/apex.elf
	b _start
	c
end
document debug_kernel
	Usage: debug_kernel

	Reset CPU and stop at entry to kernel.
end
